WHITESPACE    = _{ " " | "\t" | "\r" | "\n" }
COMMENT       = _{ PLAIN_COMMENT | DOC_COMMENT }
PLAIN_COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
DOC_COMMENT   = _{ "///" ~ (!"\n" ~ ANY)* }

Program = { SOI ~ FuncDecl* ~ EOI }

FuncDecl = { Decorator? ~ FuncHeader ~ Block }
FuncHeader = { Ident ~ "(" ~ FuncArg? ~ ("," ~ FuncArg)*? ~ ")" ~ Ident? }
Decorator = { "@" ~ Ident ~ ("(" ~ Literal? ~ ("," ~ Literal)*? ~ ")")? }
FuncArg = { Ident ~ ":" ~ Ident }

ForLoopStmtInit = { VarDecl? }
ForLoopStmtCond = { Expr? }
ForLoopStmtStep = { Expr? }
ForLoopStmtBody = { Block }
ForLoopStmt = { "(" ~ ForLoopStmtInit ~ ";" ~ ForLoopStmtCond ~ ";" ~ ForLoopStmtStep ~ ")" ~ ForLoopStmtBody }

IfSubStmt = { Expr ~ Block}
IfStmt = { IfSubStmt+ }

Block = { "{" ~ Statement* ~ "}" }

Statement = { ForLoopStmt | VarDecl ~ ";" | IfStmt | FuncCallStmt | ReturnStmt | VarAssign }

FuncCallStmt = { Expr ~ ";" }
ReturnStmt = { "<=" ~ Expr? ~ ";" }

VarAssign = { Ident ~ "=" ~ Expr ~ ";" }
VarDecl = { Ident ~ ":" ~ Ident? ~ "=" ~ Expr }
Expr = { FuncCall | Ident | Literal }
FuncCall = { Ident ~ "(" ~ Expr? ~ ("," ~ Expr)*? ~ ")" }

Literal = { String | Hex | Float | Integer }

String = { "\"" ~ (EscapeSequence | !("\"") ~ ANY)* ~ "\"" }
EscapeSequence = _{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t") }

Integer = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ ("_" ~ ASCII_DIGIT+)* }

Float = @{
    ("+" | "-")? ~ (ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

Hex = @{
    ("0x" | "0X") ~ ASCII_HEX_DIGIT+ ~ ("_" ~ ASCII_HEX_DIGIT+)*
}

Ident = @{
    (LETTER | "_") ~ (LETTER | "_" | ASCII_DIGIT)*
}
